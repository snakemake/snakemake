"""
Rule test code for unit testing of rules generated with Snakemake {{ version }}.
"""


import os
import sys
import shutil
import tempfile
from pathlib import Path
from subprocess import check_output

sys.path.insert(0, os.path.dirname(__file__))


def test_{{ ruletest.name }}(conda_prefix):

    with tempfile.TemporaryDirectory() as tmpdir:
        workdir = Path(tmpdir) / "workdir"
        data_path = Path("{{ ruletest.data_path.as_posix() }}")
        expected_path = Path("{{ ruletest.expected_path.as_posix() }}")

        # Copy data to the temporary workdir.
        shutil.copytree(data_path, workdir)

        # Copy config/ (if exists) to the temporary workdir.
        config = Path("config")
        if config.exists() and config.is_dir():
            shutil.copytree("config", workdir / config, dirs_exist_ok=True)

        # Run the test job.
        check_output(
            [
                "python",
                "-m",
                "snakemake",
                {% for target in ruletest.target %}
                "{{ target }}",
                {% endfor %}
                {% if snakefile %}
                "--snakefile",
                "{{ snakefile }}",
                {% endif %}
                "-f",
                "--notemp",
                "-j1",
                "--target-files-omit-workdir-adjustment",
                {% if configfiles %}
                "--configfile",
                {% for configfile in configfiles %}
                "{{ configfile }}",
                {% endfor %}
                {% endif %}
                {% if deploy %}
                "--software-deployment-method",
                {% for sdm in deploy %}
                "{{ sdm }}",
                {% endfor %}
                {% endif %}
                "--directory",
                workdir,
            ]
            + conda_prefix
        )

        # Check the output byte by byte using cmp/zmp/bzcmp.
        # To modify this behavior, you can inherit from common.OutputChecker in here
        # and overwrite the method `compare_files(generated_file, expected_file), 
        # also see common.py.
        import common
        common.OutputChecker(data_path, expected_path, workdir).check()
