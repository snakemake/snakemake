name: Test Flux Executors
on:
  pull_request: []

jobs:
  test-flux-operator-executor:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Note that we cannot test conda because the bind of the filesystem is too slow
        commands: [["singularity", "cp -R ./tests/test_singularity_module/* /tmp/workflow/", "snakemake --cores 1 --jobs 2 --flux-operator --use-singularity"],
                   ["vanilla", "", "snakemake --cores 1 --jobs 1 --flux-operator --minicluster-container-image ghcr.io/rse-ops/atacseq-vanilla:app-latest"]]

    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Install Snakemake
      run: |
        wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh           
        /bin/bash ~/miniconda.sh -b -p /opt/conda
        # Install snakemake
        pip install .

    - name: Install Flux Operator SDK
      run: pip install fluxoperator>=0.0.2

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ^1.18

    - name: Start minikube
      uses: medyagh/setup-minikube@697f2b7aaed5f70bf2a94ee21a4ec3dde7b12f92 # v0.0.9

    - name: Create the namespace
      run: kubectl create namespace flux-operator

    - name: Pull Docker Containers to MiniKube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        minikube ssh docker pull ghcr.io/rse-ops/mamba:app-mamba

    - name: Install Flux Operator
      run: |
        wget https://raw.githubusercontent.com/flux-framework/flux-operator/main/examples/dist/flux-operator.yaml
        kubectl apply -f flux-operator.yaml

    - name: Make workflow directory
      run: mkdir -p /tmp/workflow

    - name: Prepare workflow on Runner
      if: (matrix.commands[0] != 'singularity') 
      run: |
        git clone --depth 1 https://github.com/snakemake/snakemake-tutorial-data /tmp/workflow
        mkdir -p /tmp/workflow/scripts
        wget -O /tmp/workflow/scripts/plot-quals.py https://raw.githubusercontent.com/rse-ops/flux-hpc/main/snakemake/atacseq/scripts/plot-quals.py
        cp ./examples/flux/operator/Snakefile /tmp/workflow/Snakefile

    - name: Run ${{ matrix.commands[0] }} Test Job
      env:
        prep_command: ${{ matrix.commands[1] }}
        run_command: ${{ matrix.commands[2] }}
      run: |
        minikube mount /tmp/workflow:/tmp/workflow &
        ${prep_command}
        sudo chmod -R 775 /tmp/workflow/
        cd /tmp/workflow
        ${run_command}

  test-flux-executor:
    runs-on: ubuntu-latest
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix:
        container: ["fluxrm/flux-sched:focal"]

    container:
      image: ${{ matrix.container }}
      options: "--platform=linux/amd64 --user root -it"

    name: ${{ matrix.container }}
    steps:
      - name: Make Space
        run: |
          rm -rf /usr/share/dotnet
          rm -rf /opt/ghc

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Snakemake
        run: |
          wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh           
          /bin/bash ~/miniconda.sh -b -p /opt/conda
          # Install snakemake
          pip install .

      - name: Start Flux and Test Workflow
        run: |
          # We must have python3->python accessible for this to work
          ln -s /bin/python3 /usr/local/bin/python
          su fluxuser
          cd examples/flux
          # This run does not use conda
          which snakemake
          flux start snakemake --show-failed-logs --verbose --flux --jobs=1 --no-shared-fs

      - name: Test Flux with Conda
        run: |
          # conda python needs to be after system python
          export PATH=$PATH:/opt/conda/bin
          which python
          which conda
          cp -R ./tests/test_conda /tmp/test_conda
          cd /tmp/test_conda
          flux start snakemake --show-failed-logs --verbose --flux --jobs=1 --use-conda --conda-frontend=conda
