name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches_ignore: []

jobs:
  cancel-previous:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: khan/pull-request-workflow-cancel@1.0.0
        with:
          workflows: "main.yml"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  formatting:
    permissions:
      contents: read  # for actions/checkout to fetch code
      pull-requests: write  # for marocchino/sticky-pull-request-comment to create or update PR comment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup black environment
        run: |
          conda create -c conda-forge -y -q --name black black

      - name: Check formatting
        run: |
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate black
          black --check --diff snakemake tests/tests.py tests/test_tes.py tests/test_io.py tests/common.py tests/test_google_lifesciences.py

      - name: Comment PR
        if: github.event_name == 'pull_request' && failure()
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          message: 'Please format your code with [black](https://black.readthedocs.io): `black snakemake tests/*.py`.'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  testing:
    runs-on: ubuntu-latest
    needs: formatting
    env:
      AWS_AVAILABLE: ${{ secrets.AWS_ACCESS_KEY_ID }}
      GCP_AVAILABLE: ${{ secrets.GCP_SA_KEY }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # we need tags for versioneer to work

      - name: Setup Snakemake environment
        run: |
          export PATH="/usr/share/miniconda/bin:$PATH"
          conda config --set channel_priority strict
          conda install -c conda-forge -q mamba
          # ensure that mamba is happy to write into the cache
          sudo chown -R runner:docker /usr/share/miniconda/pkgs/cache
          mamba env create -q --name snakemake --file test-environment.yml
          # additionally add singularity
          # TODO remove version constraint: needed because 3.8.7 fails with missing libz:
          # bin/unsquashfs: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory
          mamba install -c conda-forge -n snakemake "singularity<=3.8.6"
      
      - name: Setup apt dependencies
        run: |
          sudo apt install -y stress git wget
        
      - name: Setup iRODS
        run: |
          docker build -t irods-server tests/test_remote_irods
          docker run -d -p 1247:1247 --name provider irods-server -i run_irods
          sleep 10
          docker exec -u irods provider iput /incoming/infile
          cp -r tests/test_remote_irods/setup-data ~/.irods

      - name: Setup Gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@v0.2.1
        if: env.GCP_AVAILABLE
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v1
        if: env.AWS_AVAILABLE
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      ###### slurm setup #####
      
      - name: Download slurm ansible roles
        run: |
          ansible-galaxy install galaxyproject.slurm

      - name: Define slurm playbook
        uses: 1arp/create-a-file-action@0.2
        with:
          file: slurm-playbook.yml
          content: |
            - name: Slurm all in One
              hosts: localhost
              vars:
                slurm_roles: ['controller', 'exec']
              roles:
                - role: galaxyproject.slurm
                  become: true

      - name: Setup slurm
        run: |
          ansible-playbook slurm-playbook.yml || (journalctl -xe && exit 1)

      - name: Test slurm submission
        run: |
          srun echo "hello world"
      
      ###### finalized slurm setup #####

      - name: Run tests
        env:
          CI: true
          ZENODO_SANDBOX_PAT: ${{ secrets.ZENODO_SANDBOX_PAT }}
        run: |
          # activate conda env
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate snakemake
          
          pytest -v -x tests/test_expand.py tests/test_io.py tests/test_schema.py tests/test_linting.py tests/tests.py

      - name: Build and publish docker image
        if: "contains(github.event.pull_request.labels.*.name, 'update-container-image')"
        uses: elgohr/Publish-Docker-Github-Action@v4
        with:
          name: snakemake/snakemake
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          tags: ${{ env.GITHUB_SHA }}
      
      - name: Set container image
        if: "contains(github.event.pull_request.labels.*.name, 'update-container-image')"
        run: |
          echo CONTAINER_IMAGE=snakemake/snakemake:$GITHUB_SHA >> $GITHUB_ENV

      # TODO reactivate in April (we have no free resources left this month)
      - name: Test Google Life Sciences Executor
        if: env.GCP_AVAILABLE
        run: |
          # activate conda env
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate snakemake
          pytest -s -v -x tests/test_google_lifesciences.py

      # TODO reactivate in April (we have no free resources left this month)
      - name: Test Kubernetes execution
        if: env.GCP_AVAILABLE
        env:
          CI: true
        run: |
          # activate conda env
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate snakemake

          pytest -s -v -x tests/test_kubernetes.py

      # TODO temporarily deactivate and fix in separate PR.
      - name: Test Tibanna (AWS) execution
        if: env.AWS_AVAILABLE
        env: 
          CI: true
        run: |
          # activate conda env
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate snakemake

      #     pytest -v -x -s tests/test_tibanna.py

      - name: Test GA4GH TES executor
        run: |
          # activate conda env
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate snakemake
          pytest -s -v -x tests/test_tes.py
        
      - name: Delete container image
        if: "contains(github.event.pull_request.labels.*.name, 'update-container-image') && always()"
        run: |
          docker run --rm lumir/remove-dockerhub-tag \
          --user ${{ secrets.DOCKER_USERNAME }} \
          --password ${{ secrets.DOCKER_TOKEN }} \
          snakemake/snakemake:${{ env.GITHUB_SHA }}

      - name: Build container image
        if: "!contains(github.event.pull_request.labels.*.name, 'update-container-image')"
        run: docker build .


  testing-windows:
    runs-on: windows-latest
    needs: formatting

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Remove unix-only dependencies
        shell: python
        run: |
          import fileinput
          excluded_on_win = ["environment-modules", "cwltool"]
          for line in fileinput.input("test-environment.yml", inplace=True):
              if all(pkg not in line for pkg in excluded_on_win):
                  print(line)

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: snakemake
          python-version: 3.9
          channels: conda-forge, bioconda

      - name: Setup Snakemake environment
        run: |
          conda config --set channel_priority strict
          conda install -q --name base mamba
          mamba env update -q --file test-environment.yml

      - name: Run tests
        env:
          CI: true
          ZENODO_SANDBOX_PAT: ${{ secrets.ZENODO_SANDBOX_PAT }}
        run: |
          python -m pytest -v -x tests/tests.py
